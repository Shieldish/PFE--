<head>
   
    <title>Gestion des Stages -Plannification</title>
    <%-include('./common/head') %>
    <!-- Your other CSS files -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
 <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
 <link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">
 <script src="node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <style>
     .company-section {
         margin-bottom: 2rem;
     }
     .job-card {
         height: 100%;
     }
     .job-card .card-body {
         display: flex;
         flex-direction: column;
     }
     .job-card .card-text {
         flex-grow: 1;
     }
     .pagination .page-item.active .page-link {
         background-color: #007bff;
         border-color: #007bff;
     }
 </style>


</head>
<body>
 <div class="custom-container">
    <%-include('./common/sidebar') %>
    <div class="main-content">
       <%-include('./common/navbar') %>
       <h1 style="margin: 15px; padding: 15px;">Acceuille</h1>
       <hr>

     <div>
            
         <div class="container mt-5">
             <h1 class="mb-4">Les Stages</h1>
             
             <form id="searchFilterForm" class="mb-4">
                 <div class="row g-3">
                     <div class="col-md-3">
                         <input type="text" class="form-control" id="searchInput" placeholder="Search jobs...">
                     </div>
                     <div class="col-md-2">
                         <select class="form-select" id="domainFilter">
                             <option value="">All Domains</option>
                         </select>
                     </div>
                     <div class="col-md-2">
                         <select class="form-select" id="experienceFilter">
                             <option value="">All Experience Levels</option>
                         </select>
                     </div>
                     <div class="col-md-2">
                         <select class="form-select" id="stateFilter">
                             <option value="">All States</option>
                         </select>
                     </div>
                     <div class="col-md-2">
                         <button type="submit" class="btn btn-primary w-100">Rechercher <i class="bi bi-search"></i></button>
                     </div>
                 </div>
             </form>
     
             <div class="d-flex justify-content-end mb-3">
                 <select class="form-select" id="sortSelect" style="width: auto;">
                     <option value="dateDesc">Newest First</option>
                     <option value="dateAsc">Oldest First</option>
                     <option value="titleAsc">Title A-Z</option>
                     <option value="titleDesc">Title Z-A</option>
                 </select>
             </div>
             
             <div id="jobListings">
                 <!-- Job listings grouped by company will be dynamically inserted here -->
             </div>
             
             <nav aria-label="Page navigation" class="mt-4">
                 <ul class="pagination justify-content-center" id="pagination">
                     <!-- Pagination links will be dynamically inserted here -->
                 </ul>
             </nav>
         </div> 

       <hr>
       <%-include('./common/footer') %>
    </div>
  
 </div>
 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
 <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

 <script>
     $(document).ready(function() {
         let currentPage = 1;
         const groupsPerPage = 5;
         let jobData = [];
         let filteredJobData = [];

         function fetchJobData() {
             fetch('/api/stages')
                 .then(response => response.json())
                 .then(data => {
                     jobData = data;
                     filteredJobData = [...jobData];
                     console.log(data);
                     populateFilters();
                     updateJobListings();
                 })
                 .catch(error => {
                     console.error('Error fetching data:', error);
                 });
         }

         function populateFilters() {
             const domains = [...new Set(jobData.map(job => job.Domaine))];
             const experiences = [...new Set(jobData.map(job => job.Niveau))];
             const states = [...new Set(jobData.map(job => job.Address))];

             populateDropdown('#domainFilter', domains, 'All Domains');
             populateDropdown('#experienceFilter', experiences, 'All Experience Levels');
             populateDropdown('#stateFilter', states, 'All States');
         }

         function populateDropdown(selector, options, defaultText) {
             const $dropdown = $(selector);
             $dropdown.empty();
             $dropdown.append(`<option value="">${defaultText}</option>`);
             options.forEach(option => {
                 $dropdown.append(`<option value="${option}">${option}</option>`);
             });
         }

         function updateJobListings() {
             const $jobListings = $('#jobListings');
             $jobListings.empty();

             const groupedJobs = groupJobsByDomain(filteredJobData);
             const domainKeys = Object.keys(groupedJobs);
             const startIndex = (currentPage - 1) * groupsPerPage;
             const endIndex = Math.min(startIndex + groupsPerPage, domainKeys.length);

             for (let i = startIndex; i < endIndex; i++) {
                 const domain = domainKeys[i];
                 const jobs = groupedJobs[domain];
                 const $companySection = $('<div class="company-section">');
                 $companySection.append(`<h2>${domain}</h2>`);

                 const $jobCards = $('<div class="row">');
                 jobs.forEach(job => {
                     const $col = $('<div class="col-md-4 mb-3">');
                     const $card = createJobCard(job);
                     $col.append($card);
                     $jobCards.append($col);
                 });

                 $companySection.append($jobCards);
                 $jobListings.append($companySection);
             }

             updatePagination(domainKeys.length);
         }

         function groupJobsByDomain(jobs) {
             return jobs.reduce((acc, job) => {
                 if (!acc[job.Domaine]) {
                     acc[job.Domaine] = [];
                 }
                 acc[job.Domaine].push(job);
                 return acc;
             }, {});
         }

         function createJobCard(job) {
             return $(`
                 <div class="card job-card h-100">
                     <div class="card-body d-flex flex-column">
                         <h5 class="card-title"><i class="bi bi-briefcase"></i> ${job.Titre}</h5>
                         <p class="card-text"><i class="bi bi-building"></i> ${job.Nom}</p>
                         <p class="card-text"><i class="bi bi-geo-alt"></i> ${job.Address}, ${job.State}</p>
                         <p class="card-text"><i class="bi bi-calendar"></i> ${new Date(job.DateDebut).toLocaleDateString()} - ${new Date(job.DateFin).toLocaleDateString()}</p>
                         <p class="card-text"><i class="bi bi-person-workspace"></i> Experience: ${job.Experience}</p>
                         <p class="card-text"><i class="bi bi-patch-check-fill"></i></i> Niveau: ${job.Niveau}</p>
                         <p class="card-text"><i class="bi bi-translate"></i> Language: ${job.Langue}</p>
                         <p class="card-text"><i class="bi bi-people"></i> Vacancies: ${job.PostesVacants}</p>
                         <p class="card-text"><small class="text-muted"><i class="bi bi-envelope"></i> ${job.Email}</small></p>
                         <a href="/postulate/${job.id}" class="btn btn-primary mt-auto"> <i class="bi bi-send"></i>  Postuler maintenant</a>
                          
                     </div>
                 </div>
             `);
         }

         function updatePagination(totalGroups) {
             const totalPages = Math.ceil(totalGroups / groupsPerPage);
             const $pagination = $('#pagination');
             $pagination.empty();

             // Add "Previous" button
             $pagination.append(`
                 <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                     <a class="page-link" href="#" aria-label="Previous">
                         <span aria-hidden="true">&laquo;</span>
                     </a>
                 </li>
             `);

             // Add page numbers
             for (let i = 1; i <= totalPages; i++) {
                 if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
                     $pagination.append(`<li class="page-item ${i === currentPage ? 'active' : ''}"><a class="page-link" href="#">${i}</a></li>`);
                 } else if (i === currentPage - 3 || i === currentPage + 3) {
                     $pagination.append(`<li class="page-item disabled"><a class="page-link" href="#">...</a></li>`);
                 }
             }

             // Add "Next" button
             $pagination.append(`
                 <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                     <a class="page-link" href="#" aria-label="Next">
                         <span aria-hidden="true">&raquo;</span>
                     </a>
                 </li>
             `);

             // Add click events for pagination
             $pagination.find('.page-item:not(.disabled) .page-link').click(function(e) {
                 e.preventDefault();
                 const pageText = $(this).text();
                 if (pageText === '«') {
                     currentPage--;
                 } else if (pageText === '»') {
                     currentPage++;
                 } else {
                     currentPage = parseInt(pageText);
                 }
                 updateJobListings();
             });
         }

         $('#searchFilterForm').submit(function(e) {
 e.preventDefault();
 const searchTerm = $('#searchInput').val().toLowerCase();
 const domainFilter = $('#domainFilter').val();
 const experienceFilter = $('#experienceFilter').val();
 const stateFilter = $('#stateFilter').val();
 
 filteredJobData = jobData.filter(job => {
     const searchFields = ['Titre', 'Domaine', 'Experience', 'State','Address', 'Description']; // Add more fields as needed
     const matchesSearchTerm = searchFields.some(field => 
         job[field] && job[field].toLowerCase().includes(searchTerm)
     );
     
     return matchesSearchTerm &&
            (!domainFilter || job.Domaine === domainFilter) &&
            (!experienceFilter || job.Niveau === experienceFilter) &&
            (!stateFilter || job.Address === stateFilter);
 });
 
 currentPage = 1;
 updateJobListings();
});

         $('#sortSelect').change(function() {
             const sortValue = $(this).val();
             switch(sortValue) {
                 case 'dateDesc':
                     filteredJobData.sort((a, b) => new Date(b.DateDebut) - new Date(a.DateDebut));
                     break;
                 case 'dateAsc':
                     filteredJobData.sort((a, b) => new Date(a.DateDebut) - new Date(b.DateDebut));
                     break;
                 case 'titleAsc':
                     filteredJobData.sort((a, b) => a.Titre.localeCompare(b.Titre));
                     break;
                 case 'titleDesc':
                     filteredJobData.sort((a, b) => b.Titre.localeCompare(a.Titre));
                     break;
             }
             currentPage = 1;
             updateJobListings();
         });

         fetchJobData();
     });
 </script>

</body>