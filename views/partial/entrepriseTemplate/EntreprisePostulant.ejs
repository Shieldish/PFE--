 <link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">
 <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
 <script src="node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<div class="container">
    <!-- HTML code with dynamic length display -->
    <p style="font-weight: bold;" id="postulantListTitle" class="mt-4 mb-4 text-center">Postulants List(e)s - <span id="postulantCount"></span></p>
    <!-- Search Input -->
    <input type="text" id="searchInput" class="form-control mb-2" placeholder="Search by name">
    <!-- Filter Options -->
    <div class="row mb-2">
       <div class="col-md-3">
          <select id="filterStatus" class="form-control">
             <option value="">Tous Status</option>
          </select>
       </div>
       <div class="col-md-3">
          <select id="filterDomaine" class="form-control">
             <option value="">Toutes les Domaines</option>
          </select>
       </div>
       <div class="col-md-3">
          <select id="filterInstitue" class="form-control">
             <option value="">Tous les instituts</option>
          </select>
       </div>
       <div class="col-md-3">
          <select id="filterPostulatedAt" class="form-control">
             <option value="desc">Postulé à(Recent)</option>
             <option value="asc">Postulé à (Ancient)</option>
          </select>
       </div>
    </div>
    <!-- Postulant Cards -->
    <div class="row" id="postulantList">
       <!-- Postulant data will be dynamically populated here -->
    </div>
    <!-- Postulant data will be dynamically populated here -->
    <!-- Pagination Controls -->
    <div id="pagination" class="mt-4">
       <!-- Pagination controls will be dynamically populated here -->
    </div>
 </div>
 <!-- Bootstrap JS (Optional) -->
 <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
 <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
 <!-- Your JavaScript Code -->
 <script>
    document.addEventListener('DOMContentLoaded', async () => {
        // Fetch postulants data
        const postData = await fetchPostulants();
    
        // Populate filter options and render postulant data
        populateFilterOptions(postData.postulant);
        renderPostulantData(postData.postulant, document.getElementById('postulantList'));
    
        // Add event listener for search input
        document.getElementById('searchInput').addEventListener('input', () => {
            filterPostulants();
        });
    
        // Add event listeners for filter select elements
        document.getElementById('filterStatus').addEventListener('change', () => {
            filterPostulants();
        });
        document.getElementById('filterInstitue').addEventListener('change', () => {
            filterPostulants();
        });
        document.getElementById('filterDomaine').addEventListener('change', () => {
            filterPostulants();
        });
        document.getElementById('filterPostulatedAt').addEventListener('change', () => {
            filterPostulants();
        });
    });
    
    async function fetchPostulants() {
        // Perform fetch request to your backend API to get postulants data
        const response = await fetch('/entreprise/postulant');
        const data = await response.json();
        return data;
    }



    function renderPostulantData(postulantList, container) {
        container.innerHTML = '';
        const postulantListHTML = postulantList.map(postulant => `
 <div class="card mb-4 animate__animated animate__fadeInUp postulant-card">
  <div class="card-body">
    <h5 class="card-title card-title-custom">
      <i class="fas fa-user-graduate"></i> ${postulant.etudiantName}
    </h5>
    <div class="postulant-info">
      <p class="card-text"><i class="fas fa-envelope"></i> <strong>Email:</strong> ${postulant.etudiantEmail}</p>
      <p class="card-text"><i class="fas fa-university"></i> <strong>Institute:</strong> ${postulant.etudiantInstitue}</p>
      <p class="card-text"><i class="fas fa-bookmark"></i> <strong>Domain:</strong> ${postulant.stageDomaine}</p>
      <p class="card-text"><i class="fas fa-book"></i> <strong>Subject:</strong> ${postulant.stageSujet}</p>
      <p class="card-text"><i class="fas fa-building"></i> <strong>Company:</strong> ${postulant.entrepriseName}</p>
      <p class="card-text">
        <i class="fas fa-info-circle"></i> <strong>Status:</strong> 
        <span class="status-badge status-${postulant.status.toLowerCase().replace(' ', '-')}">${postulant.status}</span>
      </p>
      <p class="card-text">
        <i class="fas fa-calendar-alt"></i> <strong>Postulated At:</strong> 
        ${new Date(postulant.postulatedAt).toLocaleString('fr-FR', {
          day: 'numeric',
          month: 'long',
          year: 'numeric',
          hour: 'numeric',
          minute: 'numeric',
          second: 'numeric',
          hour12: false
        })}
      </p>
    </div>
    <div class="postulant-actions">
      <a href="${postulant.CVPath}" target="_blank" class="btn btn-outline-primary btn-sm">
        <i class="fas fa-file-pdf"></i> Open CV
      </a>
      <a href="/entreprise/postulant_detail?etudiantEmail=${postulant.etudiantEmail}&stageId=${postulant.stageId}" class="btn btn-outline-dark btn-sm">
        <i class="fas fa-eye"></i> Voir les détails
      </a>
    </div>
  </div>
</div>

<style>
.postulant-card {
  border: none;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.postulant-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

.card-title-custom {
  font-size: 1.5rem;
  font-weight: bold;
  color: #2c3e50;
  margin-bottom: 1rem;
  border-bottom: 2px solid #3498db;
  padding-bottom: 0.5rem;
}

.postulant-info {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 0.5rem;
}

.postulant-info p {
  margin-bottom: 0.5rem;
  font-size: 0.9rem;
}

.status-badge {
  display: inline-block;
  padding: 0.25rem 0.5rem;
  border-radius: 50px;
  font-weight: bold;
  font-size: 0.8rem;
  text-transform: uppercase;
}

.status-a-attente {
  background-color: #ffeaa7;
  color: #d35400;
}

.status-accepté {
  background-color: #55efc4;
  color: #27ae60;
}

.status-refusé {
  background-color: #fab1a0;
  color: #c0392b;
}

.postulant-actions {
  display: flex;
  justify-content: space-between;
  margin-top: 1rem;
}

.btn-sm {
  padding: 0.25rem 0.5rem;
  font-size: 0.875rem;
}

.btn-outline-primary {
  color: #3498db;
  border-color: #3498db;
}

.btn-outline-primary:hover {
  background-color: #3498db;
  color: #ffffff;
}

.btn-outline-dark {
  color: #2c3e50;
  border-color: #2c3e50;
}

.btn-outline-dark:hover {
  background-color: #2c3e50;
  color: #ffffff;
}

i {
  margin-right: 0.5rem;
}
</style>

        `).join('');
        container.innerHTML = postulantListHTML;
    }
    
    function populateFilterOptions(postulants) {
        const filterStatusElement = document.getElementById('filterStatus');
        const filterInstitueElement = document.getElementById('filterInstitue');
        const filterDomaineElement = document.getElementById('filterDomaine');
    
        const uniqueStatuses = new Set();
        const uniqueInstitues = new Set();
        const uniqueDomaines = new Set();
        // Extract unique values for status, etudiantInstitue, and stageDomaine
        postulants.forEach(postulant => {
            uniqueStatuses.add(postulant.status.toUpperCase());
            uniqueInstitues.add(postulant.etudiantInstitue.toUpperCase());
            uniqueDomaines.add(postulant.stageDomaine.toUpperCase());
        });
    
        // Populate filter options for status
        [...uniqueStatuses].sort().forEach(status => {
            const option = document.createElement('option');
            option.value = status;
            option.textContent = status;
            filterStatusElement.appendChild(option);
        });
    
        // Populate filter options for etudiantInstitue
        [...uniqueInstitues].sort().forEach(institue => {
            const option = document.createElement('option');
            option.value = institue;
            option.textContent = institue;
            filterInstitueElement.appendChild(option);
        });
    
        // Populate filter options for stageDomaine
        [...uniqueDomaines].sort().forEach(domaine => {
            const option = document.createElement('option');
            option.value = domaine;
            option.textContent = domaine;
            filterDomaineElement.appendChild(option);
        });
    }
    
    async function filterPostulants() {
        const postData = await fetchPostulants(); // Fetch postulants data
        const searchTerm = document.getElementById('searchInput').value.trim().toLowerCase();
        const filterStatus = document.getElementById('filterStatus').value.toUpperCase();
        const filterInstitue = document.getElementById('filterInstitue').value.toUpperCase();
        const filterDomaine = document.getElementById('filterDomaine').value.toUpperCase();
        const filterPostulatedAt = document.getElementById('filterPostulatedAt').value;
    
        const filteredPostulants = postData.postulant.filter(postulant => {
            return (
                (searchTerm === '' ||
                    postulant.etudiantName.toLowerCase().includes(searchTerm) ||
                    postulant.etudiantEmail.toLowerCase().includes(searchTerm) ||
                    postulant.etudiantInstitue.toLowerCase().includes(searchTerm) ||
                    postulant.stageDomaine.toLowerCase().includes(searchTerm) ||
                    postulant.stageSujet.toLowerCase().includes(searchTerm) ||
                    postulant.entrepriseName.toLowerCase().includes(searchTerm) ||
                    postulant.status.toLowerCase().includes(searchTerm)) &&
                (filterStatus === '' || postulant.status.toUpperCase() === filterStatus) &&
                (filterInstitue === '' || postulant.etudiantInstitue.toUpperCase() === filterInstitue) &&
                (filterDomaine === '' || postulant.stageDomaine.toUpperCase() === filterDomaine)
            );
        });
    
        // Apply sorting based on Postulated At
         if (filterPostulatedAt === 'asc') {
            filteredPostulants.sort((a, b) => new Date(a.postulatedAt) - new Date(b.postulatedAt));
        } else if (filterPostulatedAt === 'desc') {
            filteredPostulants.sort((a, b) => new Date(b.postulatedAt) - new Date(a.postulatedAt));
        } 
       
    
    
    
           
        // Initialize the count with the total number of postulants
      
        renderPostulantData(filteredPostulants, document.getElementById('postulantList'));
        // Inside filterPostulants function after rendering the filtered data
        document.getElementById('postulantCount').textContent = filteredPostulants.length;
    }
 </script>