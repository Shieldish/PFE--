<link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">
<script defer src="node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">



<style>
    /* Card Styles */
    @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css');
    @import url('https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css');

    .card-title-custom {
        font-size: 16px;
        font-weight: bold;
           text-align: center;
        text-transform: uppercase; 
        ;/* Add this line to make the text uppercase */
    }

    .card {
       
        border-radius:none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        width: auto; /* Set the desired width */
        height: fit-content; /* Set the desired height */
     /*    max-height: fit-content; */
        background-color:rgb(255, 255, 254);
        margin: 5px;
        padding: 5px;
        
    }

    .card:hover {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        transform: translateY(-5px);
       background-color: rgb(255, 255, 255)
    }

    .card-body {
        padding: 10px;
        height: 100%; /* Make the card-body take up the full height of the card */
        display: flex;
        flex-direction: column; /* Stack the content vertically */
    }

    .card-body > * {
        margin-bottom: 10px; /* Add some spacing between card elements */
    }

    .card-body > *:last-child {
        margin-bottom: 0; /* Remove the bottom margin from the last element */
    }

    #stageGrid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); /* Minimum card width of 400px for larger screens */
    grid-gap: 10px;
    grid-auto-rows: auto; /* Set the desired height for each row */
}

@media (max-width: 600px) { /* Adjust the breakpoint as needed */
    #stageGrid {
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); /* Minimum card width of 250px for mobile screens */
    }
}


    .mybtn {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        align-self: end;
        font-size: 15px;
        width: fit-content;
        height: auto;
    }
    .time-since-created {
        display: none;
    }
/* 
    .card:hover .time-since-created {
        display: block;
    } */
</style>
<body>
    
    <script>
        // ... (existing code) ...
        let total;

        function populateFilterOptions(stages, filterElementId, propertyName) {
    const filterElement = document.getElementById(filterElementId);
    filterElement.innerHTML = '<option value="">Tou(te)s les ' + filterElementId.replace('Filter', '') + '</option>'; // Clear previous options and add the default option

    const uniqueValues = new Set(stages.map(stage => stage[propertyName]));
    uniqueValues.forEach(value => {
        // Check if the option already exists
        if (!Array.from(filterElement.options).some(option => option.value === value)) {
            const option = document.createElement('option');
            option.value = value;
            option.textContent = value;
            filterElement.appendChild(option);
        }
    });
}

        // Function to create pagination links
        function createPaginationLinks(currentPage, totalPages) {
            const paginationContainer = document.getElementById('stagePagination');
            paginationContainer.innerHTML = ''; // Clear previous pagination links

            // Create link for the first page
            const firstPageLink = document.createElement('li');
            firstPageLink.classList.add('page-item');
            const firstPageLinkAnchor = document.createElement('a');
            firstPageLinkAnchor.classList.add('page-link');
            firstPageLinkAnchor.href = '#';
            firstPageLinkAnchor.textContent = '<<';
            firstPageLinkAnchor.addEventListener('click', () => fetchStages(1));
            firstPageLink.appendChild(firstPageLinkAnchor);
            paginationContainer.appendChild(firstPageLink);

            // Create links for previous pages
            for (let i = Math.max(1, currentPage - 2); i < currentPage; i++) {
                const pageLink = document.createElement('li');
                pageLink.classList.add('page-item');
                const pageLinkAnchor = document.createElement('a');
                pageLinkAnchor.classList.add('page-link');
                pageLinkAnchor.href = '#';
                pageLinkAnchor.textContent = i;
                pageLinkAnchor.addEventListener('click', () => fetchStages(i));
                pageLink.appendChild(pageLinkAnchor);
                paginationContainer.appendChild(pageLink);
            }

            // Create link for the current page
            const currentPageLink = document.createElement('li');
            currentPageLink.classList.add('page-item', 'active');
            const currentPageLinkAnchor = document.createElement('a');
            currentPageLinkAnchor.classList.add('page-link');
            currentPageLinkAnchor.href = '#';
            currentPageLinkAnchor.textContent = currentPage;
            currentPageLink.appendChild(currentPageLinkAnchor);
            paginationContainer.appendChild(currentPageLink);

            // Create links for next pages
            for (let i = currentPage + 1; i <= Math.min(currentPage + 2, totalPages); i++) {
                const pageLink = document.createElement('li');
                pageLink.classList.add('page-item');
                const pageLinkAnchor = document.createElement('a');
                pageLinkAnchor.classList.add('page-link');
                pageLinkAnchor.href = '#';
                pageLinkAnchor.textContent = i;
                pageLinkAnchor.addEventListener('click', () => fetchStages(i));
                pageLink.appendChild(pageLinkAnchor);
                paginationContainer.appendChild(pageLink);
            }

            // Create link for the last page
            const lastPageLink = document.createElement('li');
            lastPageLink.classList.add('page-item');
            const lastPageLinkAnchor = document.createElement('a');
            lastPageLinkAnchor.classList.add('page-link');
            lastPageLinkAnchor.href = '#';
            lastPageLinkAnchor.textContent = '>>';
            lastPageLinkAnchor.addEventListener('click', () => fetchStages(totalPages));
            lastPageLink.appendChild(lastPageLinkAnchor);
            paginationContainer.appendChild(lastPageLink);
        }
      /*   page = 1, limit = 9 */
        function fetchStages( page = 1, limit = 18) {  
    const domainFilter = document.getElementById('domainFilter').value;
    const nomFilter = document.getElementById('nomFilter').value;
    const titreFilter = document.getElementById('titreFilter').value;
    const stateFilter = document.getElementById('stateFilter').value;
    const searchInput = document.getElementById('searchInput').value;
    const sortOrder = document.getElementById('sortFilter').value; // Get the selected sort order


   /*  let url = `/etudiant/All?sortBy=createdAt&sortOrder=${sortOrder}`;

    if (domainFilter) {
        url += `&Domaine=${encodeURIComponent(domainFilter)}`;
    }
    if (nomFilter) {
        url += `&Nom=${encodeURIComponent(nomFilter)}`;
    }
    if (titreFilter) {
        url += `&Titre=${encodeURIComponent(titreFilter)}`;
    }
    if (stateFilter) {
        url += `&State=${encodeURIComponent(stateFilter)}`;
    }
    if (searchInput) {
        url += `&search=${encodeURIComponent(searchInput)}`;
    } */


    let url = `/etudiant/All?page=${page}&limit=${limit}&sortBy=createdAt&sortOrder=${sortOrder}`; 

    if (domainFilter) {
        url += `&Domaine=${encodeURIComponent(domainFilter)}`;
    }
    if (nomFilter) {
        url += `&Nom=${encodeURIComponent(nomFilter)}`;
    }
    if (titreFilter) {
        url += `&Titre=${encodeURIComponent(titreFilter)}`;
    }
    if (stateFilter) {
        url += `&Address=${encodeURIComponent(stateFilter)}`;
    }
    if (searchInput) {
        url += `&search=${encodeURIComponent(searchInput)}`;
    }
 

    fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error("Network response was not ok");
            }
            return response.json();
        })
        .then(data => {
            const { stages, pagination } = data;
            total=stages.length;
            const stageGrid = document.getElementById("stageGrid");
            stageGrid.innerHTML = ""; // Clear previous stage items

            // Store the selected filter values
            const selectedDomain = document.getElementById('domainFilter').value;
            const selectedNom = document.getElementById('nomFilter').value;
            const selectedTitre = document.getElementById('titreFilter').value;
            const selectedState = document.getElementById('stateFilter').value;

            // Populate filter options dynamically
            populateFilterOptions(stages, "domainFilter", "Domaine");
            populateFilterOptions(stages, "nomFilter", "Nom");
            populateFilterOptions(stages, "titreFilter", "Titre");
            populateFilterOptions(stages, "stateFilter", "Address");

            // Set the previously selected filter values
            document.getElementById('domainFilter').value = selectedDomain;
            document.getElementById('nomFilter').value = selectedNom;
            document.getElementById('titreFilter').value = selectedTitre;
            document.getElementById('stateFilter').value = selectedState;

            // ... (existing stage item creation code) ...
           
              // Loop through each stage and create grid item
              stages.forEach((stage) => {
                  const stageItem = document.createElement("div");
                   stageItem.classList.add("col-md-10");  
            

                  stageItem.classList.add("card","animate__animated", "animate__fadeInUp");

                          console.log(stage);
                  
                  const longDescription = stage.Description; // Use the original description for full text
               
                  const dateFin = new Date(stage.DateFin);
                  const dateDebut = new Date(stage.DateDebut);
                  const formattedDateFin = dateFin.toLocaleDateString("fr-FR", { day: "numeric", month: "long", year: "numeric" });
                  const formattedDateDebut = dateDebut.toLocaleDateString("fr-FR", { day: "numeric", month: "long", year: "numeric" });

                  const createdAt = new Date(stage.createdAt);
                  const timeSinceCreated = getTimeSinceCreated(createdAt);

                  const currentTime = new Date();
                  const timeDifference = currentTime.getTime() - createdAt.getTime();
                  let timeString = "";

                  if (timeDifference < 60000) {
                      const seconds = Math.floor(timeDifference / 1000);
                      timeString = `${seconds} second${seconds !== 1 ? "s" : ""}`;
                  } else if (timeDifference < 3600000) {
                      const minutes = Math.floor(timeDifference / 60000);
                      timeString = `${minutes} minute${minutes !== 1 ? "s" : ""}`;
                  } else if (timeDifference < 86400000) {
                      const hours = Math.floor(timeDifference / 3600000);
                      timeString = `${hours} heure${hours !== 1 ? "s" : ""}`;
                  } else {
                      const days = Math.floor(timeDifference / 86400000);
                      timeString = `${days} jour${days !== 1 ? "s" : ""}`;
                  }

                  stageItem.innerHTML = `
      <div class="card-body">
    <span class="time-since-created">
        <i class="fas fa-clock me-2"></i>Publié ${timeSinceCreated}
    </span>
    <h5 class="card-title domain-title" style="text-transform: uppercase; text-align: center;">
        <strong>${stage.Domaine}</strong>
    </h5>
    <hr class="divider">
    <h5 class="card-title">
        <i class="fas fa-building me-2"></i>Chez : ${stage.Nom}
    </h5>
    <h5 class="card-title">
        <i class="fas fa-briefcase me-2"></i>Titre : ${stage.Titre}
    </h5>
    <p class="card-text">
        <strong><i class="fas fa-tag me-2"></i>Domaine:</strong> ${stage.Libelle}
    </p>
    <details class="description-wrapper">
        <summary><strong><i class="fas fa-align-left me-2"></i>Description :</strong></summary>
        <p class="long-description">${longDescription}</p>
    </details>
    <p class="card-text">
        <strong><i class="fas fa-graduation-cap me-2"></i>Niveau:</strong> ${stage.Niveau}
    </p>
    <p class="card-text">
        <strong><i class="fas fa-users me-2"></i>Nombre de poste:</strong> ${stage.PostesVacants}
    </p>
    <p class="card-text">
        <strong><i class="fas fa-map-marker-alt me-2"></i>Lieu:</strong> ${stage.State} :  ${stage.Address}
    </p>
    <hr class="divider">
    <p class="card-text">
        <strong><i class="fas fa-calendar-alt me-2"></i>Date début:</strong> ${formattedDateDebut}
    </p>
    <p class="card-text">
        <strong><i class="fas fa-calendar-alt me-2"></i>Date fin:</strong> ${formattedDateFin}
    </p>
    <a href="/entreprise/postulate/${stage.id}" class="btn btn-outline-primary mybtn" style="animation: pulse 1s infinite";>
        <i class="fas fa-paper-plane me-2"></i>Postuler maintenant
    </a>
</div>
<div class="card-footer">
    <span class="published-time">
        <i class="fas fa-clock me-2"></i>Publié il y a ${timeString}
    </span>
</div>
<hr>

<style>
 @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @keyframes bounce {
        0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
        40% { transform: translateY(-30px); }
        60% { transform: translateY(-15px); }
    }


    .card-body {
        position: relative;
        overflow: hidden;
        transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        border-radius: 15px;
        /* background: linear-gradient(145deg, #e2e8f0, #cbd5e1);  */
        background-color:"f5f5f5";
        box-shadow: 20px 20px 60px #a7aeb8, -20px -20px 60px #f7ffff;
        padding: 20px;
        margin: 20px;
    }

    .card-body:hover {
        transform: scale(1.05);
       
        box-shadow: 30px 30px 70px #9ca3af, -30px -30px 70px #ffffff;
    }

    .divider {
        border: 0;
        height: 1px;
        background: #ddd;
        margin: 20px 0;
    }

    .domain-title {
        color: #1e3a8a;
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 10px;
        animation: fadeInDown 1s;
    }

    .description-wrapper summary {
        cursor: pointer;
    }

    .description-wrapper .long-description {
        padding: 10px;
        background-color: #f1f5f9;
        border-radius: 10px;
        margin-top: 10px;
    }

    .mybtn {
        background-color: #2563eb;
        border-color: #2563eb;
        color: white;
        transition: background-color 0.3s ease;
    }

    .mybtn:hover {
        background-color: #4A90E2;
        border-color: #1d4ed8;
    }

    .card-footer {
        background-color: #e5e7eb;
        border-top: 1px solid #d1d5db;
        padding: 10px 20px;
        text-align: center;
        border-radius: 0 0 15px 15px;
    }

    .published-time {
        color: #6b7280;
    }

    @keyframes fadeInDown {
        0% {
            opacity: 0;
            transform: translateY(-20px);
        }
        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

              `;

              stageGrid.appendChild(stageItem);
              });
            // Create pagination links
            createPaginationLinks(pagination.currentPage, pagination.totalPages);
        })
        .catch(error => console.error("Error fetching stages:", error.message));
}

// Event listeners for filter changes and search input
document.getElementById("domainFilter").addEventListener("change", () => fetchStages());
document.getElementById("nomFilter").addEventListener("change", () => fetchStages());
document.getElementById("titreFilter").addEventListener("change", () => fetchStages());
document.getElementById("stateFilter").addEventListener("change", () => fetchStages());
document.getElementById("searchInput").addEventListener("input", () => fetchStages());
document.getElementById("sortFilter").addEventListener("change", () => fetchStages());


function getTimeSinceCreated(createdAt) {
          const now = new Date();
          const diffMs = now.getTime() - createdAt.getTime();
          const diffSeconds = Math.floor(diffMs / 1000);
          const diffMinutes = Math.floor(diffSeconds / 60);
          const diffHours = Math.floor(diffMinutes / 60);
          const diffDays = Math.floor(diffHours / 24);

          if (diffSeconds < 60) {
              return `il y a ${diffSeconds} secondes`;
          } else if (diffMinutes < 60) {
              return `il y a ${diffMinutes} minutes`;
          } else if (diffHours < 24) {
              return `il y a ${diffHours} heures`;
          } else {
              return `il y a ${diffDays} jours`;
          }
      }
// Initial fetch of stages
fetchStages();

</script>

