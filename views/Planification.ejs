<head>
    <title>Gestion des Stages - Plannification</title>
    <%-include('./common/head') %>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

<style>
body, html {
    margin: 0;
    padding: 0;
    height: 100%;
}

.page-container {
    display: flex;
    flex-direction: column;
    height: 100vh;
}

.fixed-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background-color: #fff;
    z-index: 1000;
    padding: 20px;
    margin-left:calc(230px + 30px); /* Sidebar width plus additional spacing */
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.button-container {
    display: flex;
    justify-content: space-between;
    margin-top: 10px;
}

.scrollable-content {
    margin-top: 150px; /* Adjust this value based on the height of your fixed header */
    flex-grow: 1;
    overflow-y: auto;
}

.table-container {
    padding: 20px;
}

/* Existing table styles */
#soutenances-table {
    width: 100%;
    border-collapse: collapse;
}
#soutenances-table {
    border-collapse: separate;
    border-spacing: 0;
}

#soutenances-table th,
#soutenances-table td {
    padding: 10px;
    border: 1px solid #ddd;
}

#soutenances-table thead {
    position: sticky;
    top: 0;
    z-index: 2;
    background-color: #f8f9fa;
}

.sticky-column {
    position: sticky;
    background-color: #f8f9fa;
    z-index: 1;
}

#soutenances-table th.sticky-column:nth-child(1) { left: 0; z-index: 3; }
#soutenances-table th.sticky-column:nth-child(2) { left: 50px; z-index: 3; }
#soutenances-table td.sticky-column:nth-child(1) { left: 0; }
#soutenances-table td.sticky-column:nth-child(2) { left: 50px; }

/* Ensure the corner cells stay on top */
#soutenances-table th.sticky-column {
    z-index: 4;
}
</style>
 
</head>
<body>
    <div class="custom-container">
        <%-include('./common/sidebar') %>
        <div class="main-content"  style="margin-left: 5px;">

        
            <ul class="nav-item">
                <div class="language-selector">
                    <select id="language-select" class="form-control">
                        <option value="en">English</option>
                        <option value="fr">Français</option>
                        <option value="ar">arabe</option>
                    </select>
                </div>
            </ul>



            <%-include('./partial/plannificationPartial/toast') %>



         <div class="page-container">
            <div class="fixed-header">
                <h1>Soutenances</h1>
                <div class="button-container">
                    <button type="button" class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#addSoutenanceModal">
                        <i class="bi bi-person-plus"></i> Ajouter une Soutenance
                    </button>
                    <button type="button" class="btn btn-outline-secondary ms-auto update-btn" id="updateTableButton">
                        <i class="bi bi-arrow-repeat"></i> Mettre à jour le table
                    </button>
                </div>
            </div>
       

            <hr style="padding: 5px;">
          <div class="myElement scrollable-content ">  
            <div class="table-container"></div>
            <table id="soutenances-table" class="  searchable sortable">
                <thead>
                    <tr>
                        <th>Action</th>  <!-- Add a new column for action buttons -->
                        
                        <th class="sticky-column">Action</th>
                          <th class="sticky-column">ID</th>
                        <th>Heure</th>
                        <th>Salle</th>
                        <th>Groupe</th>
                        <th>Type</th>
                        <th>Etudiant 1</th>
                        <th>Etudiant 2</th>
                        <th>Etudiant 3</th>
                        <th>Sujet</th>
                        <th>President</th>
                        <th>Rapporteur</th>
                        <th>Encadrant Academique</th>
                        <th>Encadrant Professionnel</th>
                        <th>Entreprise</th>
                    </tr>
                </thead>
                <tbody>
                    <% soutenances.forEach(function(soutenance) { %>
                        <tr data-id="<%= soutenance.id %>">
                            <td class="sticky-column">
                                <button class="btn btn-sm btn-outline-warning delete-btn" data-id="<%= soutenance.id %>">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                            <td class="sticky-column"><%= soutenance.id %></td>
                            <td><input type="date" value="<%= soutenance.date %>" data-field="date"></td>
                            <td><input type="time" value="<%= soutenance.time %>" data-field="time"></td>
                            <td><input type="text" value="<%= soutenance.salle %>" data-field="salle"></td>
                            <td><input type="text" value="<%= soutenance.groupe %>" data-field="groupe"></td>
                            <td>
                                <select data-field="type">
                                    <option value="Binome" <%= soutenance.type === 'Binome' ? 'selected' : '' %>>Binome</option>
                                    <option value="Monome" <%= soutenance.type === 'Monome' ? 'selected' : '' %>>Monome</option>
                                    <option value="Trinome" <%= soutenance.type === 'Trinome' ? 'selected' : '' %>>Trinome</option>
                                </select>
                            </td>
                            <td><input type="text" value="<%= soutenance.etudiant1 %>" data-field="etudiant1"></td>
                            <td><input type="text" value="<%= soutenance.etudiant2 %>" data-field="etudiant2"></td>
                            <td><input type="text" value="<%= soutenance.etudiant3 %>" data-field="etudiant3"></td>
                            <td><input type="text" value="<%= soutenance.sujet %>" data-field="sujet"></td>
                            <td><input type="text" value="<%= soutenance.president %>" data-field="president"></td>
                            <td><input type="text" value="<%= soutenance.rapporteur %>" data-field="rapporteur"></td>
                            <td><input type="text" value="<%= soutenance.encadrantAcademique %>" data-field="encadrantAcademique"></td>
                            <td><input type="text" value="<%= soutenance.encadrantProfessionnel %>" data-field="encadrantProfessionnel"></td>
                            <td><input type="text" value="<%= soutenance.entreprise %>" data-field="entreprise"></td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
            </div>
        </div>     
    </div>
            <hr>
         
        </div>
      
    </div>


<script>
document.addEventListener('DOMContentLoaded', function () {
    const table = document.getElementById('soutenances-table');
    const rows = table.querySelectorAll('tbody tr');

    rows.forEach(row => {
        const typeSelect = row.querySelector('select[data-field="type"]');
        const etudiant1 = row.querySelector('input[data-field="etudiant1"]');
        const etudiant2 = row.querySelector('input[data-field="etudiant2"]');
        const etudiant3 = row.querySelector('input[data-field="etudiant3"]');

        function updateEtudiantFields() {
            const selectedType = typeSelect.value;

            if (selectedType === 'Monome') {
                etudiant1.disabled = false;
                etudiant2.disabled = true;
                etudiant3.disabled = true;
            } else if (selectedType === 'Binome') {
                etudiant1.disabled = false;
                etudiant2.disabled = false;
                etudiant3.disabled = true;
            } else {
                etudiant1.disabled = false;
                etudiant2.disabled = false;
                etudiant3.disabled = false;
            }
        }

        // Initialize the fields on page load
        updateEtudiantFields();

        // Update fields when type changes
        typeSelect.addEventListener('change', updateEtudiantFields);
    });
});

</script>

<script>
    $(document).ready(function() {
  $('#soutenances-table input, #soutenances-table select').on('blur', function() {
    var $row = $(this).closest('tr');
    var id = $row.data('id');
    var formData = {};
    $row.find('input, select').each(function() {
      var field = $(this).data('field');
      var value = $(this).val();
      if (value.trim() !== '') {
        formData[field] = value;
      }
    });

    $.ajax({
      url: '/planification/soutenances/' + id,
      method: 'POST',
      data: formData,
      success: function(response) {
        validateAndHighlightSoutenances();

        if (response.conflictingData && response.conflictingData.length > 0) {
          var conflictingData = response.conflictingData;
          var conflictMessage = 'Conflit détecté avec les soutenances suivantes :';

          conflictingData.forEach(function(conflict) {
            // Clean up the conflict object by removing undefined or empty string values
            var cleanedConflict = {};
            for (var key in conflict) {
              if (conflict[key] !== undefined && conflict[key] !== '') {
                cleanedConflict[key] = conflict[key];
              }
            }

            // Add the base information
            conflictMessage += '\n | ID : ' + (cleanedConflict.id || 'Non spécifié');

            // Add details based on fields array
            var fieldDescriptions = [];
            if (cleanedConflict.fields.includes('date')) fieldDescriptions.push('Date');
            if (cleanedConflict.fields.includes('time')) fieldDescriptions.push('Heure');
            if (cleanedConflict.fields.includes('salle')) fieldDescriptions.push('Salle');
            if (cleanedConflict.fields.includes('president')) fieldDescriptions.push('Président');
            if (cleanedConflict.fields.includes('rapporteur')) fieldDescriptions.push('Rapporteur');
            if (cleanedConflict.fields.includes('encadrantAcademique')) fieldDescriptions.push('Encadrant Académique');
            if (cleanedConflict.fields.includes('encadrantProfessionnel')) fieldDescriptions.push('Encadrant Professionnel');

            if (fieldDescriptions.length > 0) {
                conflictMessage += '\n   ' + fieldDescriptions.join(', ');
            }
          });

          $row.addClass('conflict');
          $row.tooltip('dispose');
          $row.tooltip({
            title: conflictMessage,
            placement: 'top',
            container: 'body',
            trigger: 'hover'
          });
          $row.tooltip('show');
        } else {
          // No conflicts, show success message
          $('#successToast .toast-body').text(`Soutenance ID : ${id} mise à jour avec succès.`);
          var successToastEl = document.getElementById('successToast');
          var successToast = new bootstrap.Toast(successToastEl);
          successToast.show();

          // Remove conflict class and tooltip
          $row.removeClass('conflict');
          $row.tooltip('dispose');
          $row.addClass('update-success');
          setTimeout(function() {
            $row.removeClass('update-success');
          }, 500);
        }
      },
      error: function(err) {
        console.error('Error updating:', err);
        $('#errorToast .toast-body').text('Erreur lors de la mise à jour de la soutenance. Veuillez réessayer.');
        var errorToastEl = document.getElementById('errorToast');
        var errorToast = new bootstrap.Toast(errorToastEl);
        errorToast.show();
      }
    });
  });

  function validateAndHighlightSoutenances() {
    const updateButton = document.getElementById('updateTableButton');
    const table = document.getElementById('soutenances-table');
    const rows = Array.from(table.querySelectorAll('tbody tr'));

    const dataToCheck = rows.map(row => {
      return {
        id: row.getAttribute('data-id'),
        date: row.querySelector('input[data-field="date"]').value,
        time: row.querySelector('input[data-field="time"]').value,
        salle: row.querySelector('input[data-field="salle"]').value,
        president: row.querySelector('input[data-field="president"]').value,
        rapporteur: row.querySelector('input[data-field="rapporteur"]').value,
        encadrantAcademique: row.querySelector('input[data-field="encadrantAcademique"]').value,
        encadrantProfessionnel: row.querySelector('input[data-field="encadrantProfessionnel"]').value
      };
    });

    // Send the data to the backend for validation
    fetch('/planification/validate-soutenances', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ soutenances: dataToCheck }),
    })
    .then(response => response.json())
    .then(data => {
      // Clear previous highlights and tooltips
      rows.forEach(row => {
        row.querySelectorAll('input, select').forEach(input => {
          input.classList.remove('is-invalid');
          input.removeAttribute('title');
        });
      });

      // Highlight the problematic cells and add tooltips in French
      data.duplicates.forEach(duplicate => {
        const row = table.querySelector(`tr[data-id="${duplicate.id}"]`);
        if (row) {
          duplicate.fields.forEach(field => {
            const input = row.querySelector(`[data-field="${field}"]`);
            if (input) {
              input.classList.add('is-invalid');

              // Find the conflicting row's data
              const conflictingRow = rows.find(r => {
                const id = r.getAttribute('data-id');
                return data.duplicates.some(d => d.id === id && d.fields.includes(field));
              });

              if (conflictingRow) {
                const conflictingId = conflictingRow.getAttribute('data-id');
                const conflictingValue = conflictingRow.querySelector(`[data-field="${field}"]`).value;
                input.setAttribute('title', `Conflit avec ID: ${conflictingId}, ${field} : ${conflictingValue}`);
              }
            }
          });
        }
      });
    })
    .catch(error => console.error('Error:', error));
  }
});

</script>


        
        
<script>
    $(document).ready(function() {
        // Your existing code for updating soutenances
    
        // Handle form submission
        $('#submitSoutenance').on('click', function() {
            var formData = $('#addSoutenanceForm').serialize();

            console.log(formData)
        
            
            $.ajax({
    url: '/planification/Addsoutenances',
    method: 'POST',
    data: formData,
    success: function(response) {
        console.log('Soutenance added successfully:', response);
        $('#addSoutenanceModal').modal('hide');

        // Set success message and show the toast
        $('#successToast .toast-body').text('Soutenance ajoutée avec succès.');
        var successToastEl = document.getElementById('successToast');
        var successToast = new bootstrap.Toast(successToastEl);
        successToast.show();

       location.reload(); // Optionally, refresh the table or add the new row
       validateAndHighlightSoutenances()

    },
    error: function(err) {
        console.error('Error adding soutenance:', err);
        
        // Set error message and show the toast
        $('#errorToast .toast-body').text('Veuillez d\'abord choisir la date de soutenance   et type : ( Monome ? Binome ? Trinome  ?) et réessayer.');
        var errorToastEl = document.getElementById('errorToast');
        var errorToast = new bootstrap.Toast(errorToastEl);
        errorToast.show();
    }

    
});

        });

        function validateAndHighlightSoutenances() {
    const updateButton = document.getElementById('updateTableButton');
    const table = document.getElementById('soutenances-table');
    const rows = Array.from(table.querySelectorAll('tbody tr'));

    const dataToCheck = rows.map(row => {
        return {
            id: row.getAttribute('data-id'),
            date: row.querySelector('input[data-field="date"]').value,
            time: row.querySelector('input[data-field="time"]').value,
            salle: row.querySelector('input[data-field="salle"]').value,
            president: row.querySelector('input[data-field="president"]').value,
            rapporteur: row.querySelector('input[data-field="rapporteur"]').value,
            encadrantAcademique: row.querySelector('input[data-field="encadrantAcademique"]').value,
            encadrantProfessionnel: row.querySelector('input[data-field="encadrantProfessionnel"]').value
        };
    });

    // Send the data to the backend for validation
    fetch('/planification/validate-soutenances', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ soutenances: dataToCheck }),
    })
    .then(response => response.json())
    .then(data => {
        // Clear previous highlights and tooltips
        rows.forEach(row => {
            row.querySelectorAll('input, select').forEach(input => {
                input.classList.remove('is-invalid');
                input.removeAttribute('title');
            });
        });

        // Highlight the problematic cells and add tooltips in French
        data.duplicates.forEach(duplicate => {
            const row = table.querySelector(`tr[data-id="${duplicate.id}"]`);
            if (row) {
                duplicate.fields.forEach(field => {
                    const input = row.querySelector(`[data-field="${field}"]`);
                    if (input) {
                        input.classList.add('is-invalid');

                        // Find the conflicting row's data
                        const conflictingRow = rows.find(r => {
                            const id = r.getAttribute('data-id');
                            return data.duplicates.some(d => d.id === id && d.fields.includes(field));
                        });

                        if (conflictingRow) {
                            const conflictingId = conflictingRow.getAttribute('data-id');
                            const conflictingValue = conflictingRow.querySelector(`[data-field="${field}"]`).value;
                            input.setAttribute('title', `Conflit avec ID: ${conflictingId},  ${field} : ${conflictingValue}`);
                        }
                    }
                });
            }
        });
    })
    .catch(error => console.error('Error:', error));
}

    });
    </script>



   <script>
    $(document).ready(function() {
  // ...

  // Delete button click event
  $('#soutenances-table').on('click', '.delete-btn', function() {
    var id = $(this).data('id');
    $('#delete-soutenance-id').text(id); // Set the soutenance ID in the modal
    $('#deleteModal').data('id', id); // Store the ID in the modal
    $('#deleteModal').modal('show'); // Show the delete confirmation modal
  });

  // Delete confirmation button click event
  $('#deleteModal').on('click', '.delete-confirm-btn', function() {
    var id = $('#deleteModal').data('id');
    $.ajax({
      url: '/planification/soutenances/' + id,
      method: 'DELETE',
      success: function(response) {
        // Show success toast
        $('#successToast .toast-body').text(`Soutenance ID ${id} supprimée avec succès.`);
        var successToastEl = document.getElementById('successToast');
        var successToast = new bootstrap.Toast(successToastEl);
        successToast.show();

        // Remove the deleted row from the table
        $(`tr[data-id="${id}"]`).remove();
        $('#deleteModal').modal('hide'); // Hide the modal
      },
      error: function(err) {
        // Show error toast
        $('#errorToast .toast-body').text(`Erreur lors de la suppression de la soutenance ID ${id}. Veuillez réessayer.`);
        var errorToastEl = document.getElementById('errorToast');
        var errorToast = new bootstrap.Toast(errorToastEl);
        errorToast.show();
        $('#deleteModal').modal('hide'); // Hide the modal
      }
    });
  });

  // ...
});
   </script>



<script> 
    document.addEventListener('DOMContentLoaded', function () {
        const updateButton = document.getElementById('updateTableButton');
        const table = document.getElementById('soutenances-table');
      
        updateButton.addEventListener('click', function () {
          const rows = Array.from(table.querySelectorAll('tbody tr'));
          const dataToCheck = rows.map(row => {
            return {
              id: row.getAttribute('data-id'),
              date: row.querySelector('input[data-field="date"]').value,
              time: row.querySelector('input[data-field="time"]').value,
              salle: row.querySelector('input[data-field="salle"]').value,
              president: row.querySelector('input[data-field="president"]').value,
              rapporteur: row.querySelector('input[data-field="rapporteur"]').value,
              encadrantAcademique: row.querySelector('input[data-field="encadrantAcademique"]').value,
              encadrantProfessionnel: row.querySelector('input[data-field="encadrantProfessionnel"]').value
            };
          });
      
          // Send the data to the backend for validation
          fetch('/planification/validate-soutenances', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ soutenances: dataToCheck }),
          })
          .then(response => response.json())
          .then(data => {
            // Clear previous highlights
            rows.forEach(row => {
              row.querySelectorAll('input, select').forEach(input => {
                input.classList.remove('is-invalid');
                input.removeAttribute('title');
              });
            });
    
            if (data.duplicates.length > 0) {
              let errorMessage = 'Les champs en conflit :\n';
    
              // Highlight duplicates and compile error message
              data.duplicates.forEach(duplicate => {
                const row = table.querySelector(`tr[data-id="${duplicate.id}"]`);
                if (row) {
                  duplicate.fields.forEach(field => {
                    const input = row.querySelector(`[data-field="${field}"]`);
                    if (input) {
                      input.classList.add('is-invalid');
    
                      // Find the conflicting row's data
                      const conflictingRow = rows.find(r => {
                        const id = r.getAttribute('data-id');
                        return data.duplicates.some(d => d.id === id && d.fields.includes(field));
                      });
    
                      if (conflictingRow) {
                        const conflictingId = conflictingRow.getAttribute('data-id');
                        const conflictingValue = conflictingRow.querySelector(`[data-field="${field}"]`).value;
                        const conflictMessage = `\nConflit avec ID: ${conflictingId}, ${field}: ${conflictingValue}\n`;
                        input.setAttribute('title', conflictMessage);
                        errorMessage += `${conflictMessage}\n`;
                      }
                    }
                  });
                }
              });
    
              // Show error toast with detailed message
              $('#warningToast .toast-body').text(errorMessage.trim());
              const errorToastEl = document.getElementById('warningToast');
              const warningToast = new bootstrap.Toast(errorToastEl);
              warningToast.show();
            } else {
              // No duplicates found, show success toast
              $('#successToast .toast-body').text('Table mise à jour avec succès, aucun conflit détecté.');
              const successToastEl = document.getElementById('successToast');
              const successToast = new bootstrap.Toast(successToastEl);
              successToast.show();
            }
          })
          .catch(error => {
            console.error('Error:', error);
    
            // Show generic error toast in case of a fetch error
            $('#errorToast .toast-body').text('Une erreur est survenue lors de la validation. Veuillez réessayer.');
            const errorToastEl = document.getElementById('errorToast');
            const errorToast = new bootstrap.Toast(errorToastEl);
            errorToast.show();
          });
        });
    });
    </script>
    
    

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
</html>